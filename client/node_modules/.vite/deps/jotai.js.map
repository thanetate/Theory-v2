{
  "version": 3,
  "sources": ["../../jotai/esm/vanilla.mjs", "../../jotai/esm/react.mjs"],
  "sourcesContent": ["let keyCount = 0;\nfunction atom(read, write) {\n  const key = `atom${++keyCount}`;\n  const config = {\n    toString() {\n      return (import.meta.env ? import.meta.env.MODE : void 0) !== \"production\" && this.debugLabel ? key + \":\" + this.debugLabel : key;\n    }\n  };\n  if (typeof read === \"function\") {\n    config.read = read;\n  } else {\n    config.init = read;\n    config.read = defaultRead;\n    config.write = defaultWrite;\n  }\n  if (write) {\n    config.write = write;\n  }\n  return config;\n}\nfunction defaultRead(get) {\n  return get(this);\n}\nfunction defaultWrite(get, set, arg) {\n  return set(\n    this,\n    typeof arg === \"function\" ? arg(get(this)) : arg\n  );\n}\n\nconst isSelfAtom = (atom, a) => atom.unstable_is ? atom.unstable_is(a) : a === atom;\nconst hasInitialValue = (atom) => \"init\" in atom;\nconst isActuallyWritableAtom = (atom) => !!atom.write;\nconst cancelablePromiseMap = /* @__PURE__ */ new WeakMap();\nconst isPendingPromise = (value) => {\n  var _a;\n  return isPromiseLike(value) && !((_a = cancelablePromiseMap.get(value)) == null ? void 0 : _a[1]);\n};\nconst cancelPromise = (promise, nextValue) => {\n  const promiseState = cancelablePromiseMap.get(promise);\n  if (promiseState) {\n    promiseState[1] = true;\n    promiseState[0].forEach((fn) => fn(nextValue));\n  } else if ((import.meta.env ? import.meta.env.MODE : void 0) !== \"production\") {\n    throw new Error(\"[Bug] cancelable promise not found\");\n  }\n};\nconst patchPromiseForCancelability = (promise) => {\n  if (cancelablePromiseMap.has(promise)) {\n    return;\n  }\n  const promiseState = [/* @__PURE__ */ new Set(), false];\n  cancelablePromiseMap.set(promise, promiseState);\n  const settle = () => {\n    promiseState[1] = true;\n  };\n  promise.then(settle, settle);\n  promise.onCancel = (fn) => {\n    promiseState[0].add(fn);\n  };\n};\nconst isPromiseLike = (x) => typeof (x == null ? void 0 : x.then) === \"function\";\nconst isAtomStateInitialized = (atomState) => \"v\" in atomState || \"e\" in atomState;\nconst returnAtomValue = (atomState) => {\n  if (\"e\" in atomState) {\n    throw atomState.e;\n  }\n  if ((import.meta.env ? import.meta.env.MODE : void 0) !== \"production\" && !(\"v\" in atomState)) {\n    throw new Error(\"[Bug] atom state is not initialized\");\n  }\n  return atomState.v;\n};\nconst addPendingPromiseToDependency = (atom, promise, dependencyAtomState) => {\n  if (!dependencyAtomState.p.has(atom)) {\n    dependencyAtomState.p.add(atom);\n    promise.then(\n      () => {\n        dependencyAtomState.p.delete(atom);\n      },\n      () => {\n        dependencyAtomState.p.delete(atom);\n      }\n    );\n  }\n};\nconst addDependency = (batch, atom, atomState, a, aState) => {\n  var _a;\n  if ((import.meta.env ? import.meta.env.MODE : void 0) !== \"production\" && a === atom) {\n    throw new Error(\"[Bug] atom cannot depend on itself\");\n  }\n  atomState.d.set(a, aState.n);\n  if (isPendingPromise(atomState.v)) {\n    addPendingPromiseToDependency(atom, atomState.v, aState);\n  }\n  (_a = aState.m) == null ? void 0 : _a.t.add(atom);\n  if (batch) {\n    addBatchAtomDependent(batch, a, atom);\n  }\n};\nconst createBatch = () => ({\n  D: /* @__PURE__ */ new Map(),\n  H: /* @__PURE__ */ new Set(),\n  M: /* @__PURE__ */ new Set(),\n  L: /* @__PURE__ */ new Set()\n});\nconst addBatchFunc = (batch, priority, fn) => {\n  batch[priority].add(fn);\n};\nconst registerBatchAtom = (batch, atom, atomState) => {\n  if (!batch.D.has(atom)) {\n    batch.D.set(atom, /* @__PURE__ */ new Set());\n    addBatchFunc(batch, \"M\", () => {\n      var _a;\n      (_a = atomState.m) == null ? void 0 : _a.l.forEach((listener) => addBatchFunc(batch, \"M\", listener));\n    });\n  }\n};\nconst addBatchAtomDependent = (batch, atom, dependent) => {\n  const dependents = batch.D.get(atom);\n  if (dependents) {\n    dependents.add(dependent);\n  }\n};\nconst getBatchAtomDependents = (batch, atom) => batch.D.get(atom);\nconst flushBatch = (batch) => {\n  let error;\n  let hasError = false;\n  const call = (fn) => {\n    try {\n      fn();\n    } catch (e) {\n      if (!hasError) {\n        error = e;\n        hasError = true;\n      }\n    }\n  };\n  while (batch.H.size || batch.M.size || batch.L.size) {\n    batch.D.clear();\n    batch.H.forEach(call);\n    batch.H.clear();\n    batch.M.forEach(call);\n    batch.M.clear();\n    batch.L.forEach(call);\n    batch.L.clear();\n  }\n  if (hasError) {\n    throw error;\n  }\n};\nconst buildStore = (...[getAtomState, atomRead, atomWrite, atomOnMount]) => {\n  const setAtomStateValueOrPromise = (atom, atomState, valueOrPromise) => {\n    const hasPrevValue = \"v\" in atomState;\n    const prevValue = atomState.v;\n    const pendingPromise = isPendingPromise(atomState.v) ? atomState.v : null;\n    if (isPromiseLike(valueOrPromise)) {\n      patchPromiseForCancelability(valueOrPromise);\n      for (const a of atomState.d.keys()) {\n        addPendingPromiseToDependency(atom, valueOrPromise, getAtomState(a));\n      }\n      atomState.v = valueOrPromise;\n    } else {\n      atomState.v = valueOrPromise;\n    }\n    delete atomState.e;\n    delete atomState.x;\n    if (!hasPrevValue || !Object.is(prevValue, atomState.v)) {\n      ++atomState.n;\n      if (pendingPromise) {\n        cancelPromise(pendingPromise, valueOrPromise);\n      }\n    }\n  };\n  const readAtomState = (batch, atom) => {\n    var _a;\n    const atomState = getAtomState(atom);\n    if (isAtomStateInitialized(atomState)) {\n      if (atomState.m && !atomState.x) {\n        return atomState;\n      }\n      if (Array.from(atomState.d).every(\n        ([a, n]) => (\n          // Recursively, read the atom state of the dependency, and\n          // check if the atom epoch number is unchanged\n          readAtomState(batch, a).n === n\n        )\n      )) {\n        return atomState;\n      }\n    }\n    atomState.d.clear();\n    let isSync = true;\n    const getter = (a) => {\n      if (isSelfAtom(atom, a)) {\n        const aState2 = getAtomState(a);\n        if (!isAtomStateInitialized(aState2)) {\n          if (hasInitialValue(a)) {\n            setAtomStateValueOrPromise(a, aState2, a.init);\n          } else {\n            throw new Error(\"no atom init\");\n          }\n        }\n        return returnAtomValue(aState2);\n      }\n      const aState = readAtomState(batch, a);\n      try {\n        return returnAtomValue(aState);\n      } finally {\n        if (isSync) {\n          addDependency(batch, atom, atomState, a, aState);\n        } else {\n          const batch2 = createBatch();\n          addDependency(batch2, atom, atomState, a, aState);\n          mountDependencies(batch2, atom, atomState);\n          flushBatch(batch2);\n        }\n      }\n    };\n    let controller;\n    let setSelf;\n    const options = {\n      get signal() {\n        if (!controller) {\n          controller = new AbortController();\n        }\n        return controller.signal;\n      },\n      get setSelf() {\n        if ((import.meta.env ? import.meta.env.MODE : void 0) !== \"production\" && !isActuallyWritableAtom(atom)) {\n          console.warn(\"setSelf function cannot be used with read-only atom\");\n        }\n        if (!setSelf && isActuallyWritableAtom(atom)) {\n          setSelf = (...args) => {\n            if ((import.meta.env ? import.meta.env.MODE : void 0) !== \"production\" && isSync) {\n              console.warn(\"setSelf function cannot be called in sync\");\n            }\n            if (!isSync) {\n              return writeAtom(atom, ...args);\n            }\n          };\n        }\n        return setSelf;\n      }\n    };\n    try {\n      const valueOrPromise = atomRead(atom, getter, options);\n      setAtomStateValueOrPromise(atom, atomState, valueOrPromise);\n      if (isPromiseLike(valueOrPromise)) {\n        (_a = valueOrPromise.onCancel) == null ? void 0 : _a.call(valueOrPromise, () => controller == null ? void 0 : controller.abort());\n        const complete = () => {\n          if (atomState.m) {\n            const batch2 = createBatch();\n            mountDependencies(batch2, atom, atomState);\n            flushBatch(batch2);\n          }\n        };\n        valueOrPromise.then(complete, complete);\n      }\n      return atomState;\n    } catch (error) {\n      delete atomState.v;\n      atomState.e = error;\n      delete atomState.x;\n      ++atomState.n;\n      return atomState;\n    } finally {\n      isSync = false;\n    }\n  };\n  const readAtom = (atom) => returnAtomValue(readAtomState(void 0, atom));\n  const getMountedOrBatchDependents = (batch, atom, atomState) => {\n    var _a, _b;\n    const dependents = /* @__PURE__ */ new Map();\n    for (const a of ((_a = atomState.m) == null ? void 0 : _a.t) || []) {\n      const aState = getAtomState(a);\n      if (aState.m) {\n        dependents.set(a, aState);\n      }\n    }\n    for (const atomWithPendingPromise of atomState.p) {\n      dependents.set(\n        atomWithPendingPromise,\n        getAtomState(atomWithPendingPromise)\n      );\n    }\n    (_b = getBatchAtomDependents(batch, atom)) == null ? void 0 : _b.forEach((dependent) => {\n      dependents.set(dependent, getAtomState(dependent));\n    });\n    return dependents;\n  };\n  const recomputeDependents = (batch, atom, atomState) => {\n    const topSortedReversed = [];\n    const visiting = /* @__PURE__ */ new Set();\n    const visited = /* @__PURE__ */ new Set();\n    const stack = [[atom, atomState]];\n    while (stack.length > 0) {\n      const [a, aState] = stack[stack.length - 1];\n      if (visited.has(a)) {\n        stack.pop();\n        continue;\n      }\n      if (visiting.has(a)) {\n        topSortedReversed.push([a, aState, aState.n]);\n        visited.add(a);\n        aState.x = true;\n        stack.pop();\n        continue;\n      }\n      visiting.add(a);\n      for (const [d, s] of getMountedOrBatchDependents(batch, a, aState)) {\n        if (a !== d && !visiting.has(d)) {\n          stack.push([d, s]);\n        }\n      }\n    }\n    addBatchFunc(batch, \"H\", () => {\n      const changedAtoms = /* @__PURE__ */ new Set([atom]);\n      for (let i = topSortedReversed.length - 1; i >= 0; --i) {\n        const [a, aState, prevEpochNumber] = topSortedReversed[i];\n        let hasChangedDeps = false;\n        for (const dep of aState.d.keys()) {\n          if (dep !== a && changedAtoms.has(dep)) {\n            hasChangedDeps = true;\n            break;\n          }\n        }\n        if (hasChangedDeps) {\n          readAtomState(batch, a);\n          mountDependencies(batch, a, aState);\n          if (prevEpochNumber !== aState.n) {\n            registerBatchAtom(batch, a, aState);\n            changedAtoms.add(a);\n          }\n        }\n        delete aState.x;\n      }\n    });\n  };\n  const writeAtomState = (batch, atom, ...args) => {\n    let isSync = true;\n    const getter = (a) => returnAtomValue(readAtomState(batch, a));\n    const setter = (a, ...args2) => {\n      const aState = getAtomState(a);\n      try {\n        if (isSelfAtom(atom, a)) {\n          if (!hasInitialValue(a)) {\n            throw new Error(\"atom not writable\");\n          }\n          const prevEpochNumber = aState.n;\n          const v = args2[0];\n          setAtomStateValueOrPromise(a, aState, v);\n          mountDependencies(batch, a, aState);\n          if (prevEpochNumber !== aState.n) {\n            registerBatchAtom(batch, a, aState);\n            recomputeDependents(batch, a, aState);\n          }\n          return void 0;\n        } else {\n          return writeAtomState(batch, a, ...args2);\n        }\n      } finally {\n        if (!isSync) {\n          flushBatch(batch);\n        }\n      }\n    };\n    try {\n      return atomWrite(atom, getter, setter, ...args);\n    } finally {\n      isSync = false;\n    }\n  };\n  const writeAtom = (atom, ...args) => {\n    const batch = createBatch();\n    try {\n      return writeAtomState(batch, atom, ...args);\n    } finally {\n      flushBatch(batch);\n    }\n  };\n  const mountDependencies = (batch, atom, atomState) => {\n    if (atomState.m && !isPendingPromise(atomState.v)) {\n      for (const a of atomState.d.keys()) {\n        if (!atomState.m.d.has(a)) {\n          const aMounted = mountAtom(batch, a, getAtomState(a));\n          aMounted.t.add(atom);\n          atomState.m.d.add(a);\n        }\n      }\n      for (const a of atomState.m.d || []) {\n        if (!atomState.d.has(a)) {\n          atomState.m.d.delete(a);\n          const aMounted = unmountAtom(batch, a, getAtomState(a));\n          aMounted == null ? void 0 : aMounted.t.delete(atom);\n        }\n      }\n    }\n  };\n  const mountAtom = (batch, atom, atomState) => {\n    if (!atomState.m) {\n      readAtomState(batch, atom);\n      for (const a of atomState.d.keys()) {\n        const aMounted = mountAtom(batch, a, getAtomState(a));\n        aMounted.t.add(atom);\n      }\n      atomState.m = {\n        l: /* @__PURE__ */ new Set(),\n        d: new Set(atomState.d.keys()),\n        t: /* @__PURE__ */ new Set()\n      };\n      if (isActuallyWritableAtom(atom)) {\n        const mounted = atomState.m;\n        let setAtom;\n        const createInvocationContext = (batch2, fn) => {\n          let isSync = true;\n          setAtom = (...args) => {\n            try {\n              return writeAtomState(batch2, atom, ...args);\n            } finally {\n              if (!isSync) {\n                flushBatch(batch2);\n              }\n            }\n          };\n          try {\n            return fn();\n          } finally {\n            isSync = false;\n          }\n        };\n        addBatchFunc(batch, \"L\", () => {\n          const onUnmount = createInvocationContext(\n            batch,\n            () => atomOnMount(atom, (...args) => setAtom(...args))\n          );\n          if (onUnmount) {\n            mounted.u = (batch2) => createInvocationContext(batch2, onUnmount);\n          }\n        });\n      }\n    }\n    return atomState.m;\n  };\n  const unmountAtom = (batch, atom, atomState) => {\n    if (atomState.m && !atomState.m.l.size && !Array.from(atomState.m.t).some((a) => {\n      var _a;\n      return (_a = getAtomState(a).m) == null ? void 0 : _a.d.has(atom);\n    })) {\n      const onUnmount = atomState.m.u;\n      if (onUnmount) {\n        addBatchFunc(batch, \"L\", () => onUnmount(batch));\n      }\n      delete atomState.m;\n      for (const a of atomState.d.keys()) {\n        const aMounted = unmountAtom(batch, a, getAtomState(a));\n        aMounted == null ? void 0 : aMounted.t.delete(atom);\n      }\n      return void 0;\n    }\n    return atomState.m;\n  };\n  const subscribeAtom = (atom, listener) => {\n    const batch = createBatch();\n    const atomState = getAtomState(atom);\n    const mounted = mountAtom(batch, atom, atomState);\n    const listeners = mounted.l;\n    listeners.add(listener);\n    flushBatch(batch);\n    return () => {\n      listeners.delete(listener);\n      const batch2 = createBatch();\n      unmountAtom(batch2, atom, atomState);\n      flushBatch(batch2);\n    };\n  };\n  const unstable_derive = (fn) => buildStore(...fn(getAtomState, atomRead, atomWrite, atomOnMount));\n  const store = {\n    get: readAtom,\n    set: writeAtom,\n    sub: subscribeAtom,\n    unstable_derive\n  };\n  return store;\n};\nconst deriveDevStoreRev4 = (store) => {\n  const proxyAtomStateMap = /* @__PURE__ */ new WeakMap();\n  const debugMountedAtoms = /* @__PURE__ */ new Set();\n  let savedGetAtomState;\n  let inRestoreAtom = 0;\n  const derivedStore = store.unstable_derive(\n    (getAtomState, atomRead, atomWrite, atomOnMount) => {\n      savedGetAtomState = getAtomState;\n      return [\n        (atom) => {\n          let proxyAtomState = proxyAtomStateMap.get(atom);\n          if (!proxyAtomState) {\n            const atomState = getAtomState(atom);\n            proxyAtomState = new Proxy(atomState, {\n              set(target, prop, value) {\n                if (prop === \"m\") {\n                  debugMountedAtoms.add(atom);\n                }\n                return Reflect.set(target, prop, value);\n              },\n              deleteProperty(target, prop) {\n                if (prop === \"m\") {\n                  debugMountedAtoms.delete(atom);\n                }\n                return Reflect.deleteProperty(target, prop);\n              }\n            });\n            proxyAtomStateMap.set(atom, proxyAtomState);\n          }\n          return proxyAtomState;\n        },\n        atomRead,\n        (atom, getter, setter, ...args) => {\n          if (inRestoreAtom) {\n            return setter(atom, ...args);\n          }\n          return atomWrite(atom, getter, setter, ...args);\n        },\n        atomOnMount\n      ];\n    }\n  );\n  const savedStoreSet = derivedStore.set;\n  const devStore = {\n    // store dev methods (these are tentative and subject to change without notice)\n    dev4_get_internal_weak_map: () => ({\n      get: (atom) => {\n        const atomState = savedGetAtomState(atom);\n        if (atomState.n === 0) {\n          return void 0;\n        }\n        return atomState;\n      }\n    }),\n    dev4_get_mounted_atoms: () => debugMountedAtoms,\n    dev4_restore_atoms: (values) => {\n      const restoreAtom = {\n        read: () => null,\n        write: (_get, set) => {\n          ++inRestoreAtom;\n          try {\n            for (const [atom, value] of values) {\n              if (hasInitialValue(atom)) {\n                set(atom, value);\n              }\n            }\n          } finally {\n            --inRestoreAtom;\n          }\n        }\n      };\n      savedStoreSet(restoreAtom);\n    }\n  };\n  return Object.assign(derivedStore, devStore);\n};\nconst createStore = () => {\n  const atomStateMap = /* @__PURE__ */ new WeakMap();\n  const getAtomState = (atom) => {\n    if ((import.meta.env ? import.meta.env.MODE : void 0) !== \"production\" && !atom) {\n      throw new Error(\"Atom is undefined or null\");\n    }\n    let atomState = atomStateMap.get(atom);\n    if (!atomState) {\n      atomState = { d: /* @__PURE__ */ new Map(), p: /* @__PURE__ */ new Set(), n: 0 };\n      atomStateMap.set(atom, atomState);\n    }\n    return atomState;\n  };\n  const store = buildStore(\n    getAtomState,\n    (atom, ...params) => atom.read(...params),\n    (atom, ...params) => atom.write(...params),\n    (atom, ...params) => {\n      var _a;\n      return (_a = atom.onMount) == null ? void 0 : _a.call(atom, ...params);\n    }\n  );\n  if ((import.meta.env ? import.meta.env.MODE : void 0) !== \"production\") {\n    return deriveDevStoreRev4(store);\n  }\n  return store;\n};\nlet defaultStore;\nconst getDefaultStore = () => {\n  if (!defaultStore) {\n    defaultStore = createStore();\n    if ((import.meta.env ? import.meta.env.MODE : void 0) !== \"production\") {\n      globalThis.__JOTAI_DEFAULT_STORE__ || (globalThis.__JOTAI_DEFAULT_STORE__ = defaultStore);\n      if (globalThis.__JOTAI_DEFAULT_STORE__ !== defaultStore) {\n        console.warn(\n          \"Detected multiple Jotai instances. It may cause unexpected behavior with the default store. https://github.com/pmndrs/jotai/discussions/2044\"\n        );\n      }\n    }\n  }\n  return defaultStore;\n};\n\nexport { atom, createStore, getDefaultStore };\n", "'use client';\nimport ReactExports, { createContext, useContext, useRef, createElement, useReducer, useEffect, useDebugValue, useCallback } from 'react';\nimport { getDefaultStore, createStore } from 'jotai/vanilla';\n\nconst StoreContext = createContext(\n  void 0\n);\nconst useStore = (options) => {\n  const store = useContext(StoreContext);\n  return (options == null ? void 0 : options.store) || store || getDefaultStore();\n};\nconst Provider = ({\n  children,\n  store\n}) => {\n  const storeRef = useRef(void 0);\n  if (!store && !storeRef.current) {\n    storeRef.current = createStore();\n  }\n  return createElement(\n    StoreContext.Provider,\n    {\n      value: store || storeRef.current\n    },\n    children\n  );\n};\n\nconst isPromiseLike = (x) => typeof (x == null ? void 0 : x.then) === \"function\";\nconst attachPromiseMeta = (promise) => {\n  promise.status = \"pending\";\n  promise.then(\n    (v) => {\n      promise.status = \"fulfilled\";\n      promise.value = v;\n    },\n    (e) => {\n      promise.status = \"rejected\";\n      promise.reason = e;\n    }\n  );\n};\nconst use = ReactExports.use || ((promise) => {\n  if (promise.status === \"pending\") {\n    throw promise;\n  } else if (promise.status === \"fulfilled\") {\n    return promise.value;\n  } else if (promise.status === \"rejected\") {\n    throw promise.reason;\n  } else {\n    attachPromiseMeta(promise);\n    throw promise;\n  }\n});\nconst continuablePromiseMap = /* @__PURE__ */ new WeakMap();\nconst createContinuablePromise = (promise) => {\n  let continuablePromise = continuablePromiseMap.get(promise);\n  if (!continuablePromise) {\n    continuablePromise = new Promise((resolve, reject) => {\n      let curr = promise;\n      const onFulfilled = (me) => (v) => {\n        if (curr === me) {\n          resolve(v);\n        }\n      };\n      const onRejected = (me) => (e) => {\n        if (curr === me) {\n          reject(e);\n        }\n      };\n      const registerCancelHandler = (p) => {\n        if (\"onCancel\" in p && typeof p.onCancel === \"function\") {\n          p.onCancel((nextValue) => {\n            if ((import.meta.env ? import.meta.env.MODE : void 0) !== \"production\" && nextValue === p) {\n              throw new Error(\"[Bug] p is not updated even after cancelation\");\n            }\n            if (isPromiseLike(nextValue)) {\n              continuablePromiseMap.set(nextValue, continuablePromise);\n              curr = nextValue;\n              nextValue.then(onFulfilled(nextValue), onRejected(nextValue));\n              registerCancelHandler(nextValue);\n            } else {\n              resolve(nextValue);\n            }\n          });\n        }\n      };\n      promise.then(onFulfilled(promise), onRejected(promise));\n      registerCancelHandler(promise);\n    });\n    continuablePromiseMap.set(promise, continuablePromise);\n  }\n  return continuablePromise;\n};\nfunction useAtomValue(atom, options) {\n  const store = useStore(options);\n  const [[valueFromReducer, storeFromReducer, atomFromReducer], rerender] = useReducer(\n    (prev) => {\n      const nextValue = store.get(atom);\n      if (Object.is(prev[0], nextValue) && prev[1] === store && prev[2] === atom) {\n        return prev;\n      }\n      return [nextValue, store, atom];\n    },\n    void 0,\n    () => [store.get(atom), store, atom]\n  );\n  let value = valueFromReducer;\n  if (storeFromReducer !== store || atomFromReducer !== atom) {\n    rerender();\n    value = store.get(atom);\n  }\n  const delay = options == null ? void 0 : options.delay;\n  useEffect(() => {\n    const unsub = store.sub(atom, () => {\n      if (typeof delay === \"number\") {\n        const value2 = store.get(atom);\n        if (isPromiseLike(value2)) {\n          attachPromiseMeta(createContinuablePromise(value2));\n        }\n        setTimeout(rerender, delay);\n        return;\n      }\n      rerender();\n    });\n    rerender();\n    return unsub;\n  }, [store, atom, delay]);\n  useDebugValue(value);\n  if (isPromiseLike(value)) {\n    const promise = createContinuablePromise(value);\n    return use(promise);\n  }\n  return value;\n}\n\nfunction useSetAtom(atom, options) {\n  const store = useStore(options);\n  const setAtom = useCallback(\n    (...args) => {\n      if ((import.meta.env ? import.meta.env.MODE : void 0) !== \"production\" && !(\"write\" in atom)) {\n        throw new Error(\"not writable atom\");\n      }\n      return store.set(atom, ...args);\n    },\n    [store, atom]\n  );\n  return setAtom;\n}\n\nfunction useAtom(atom, options) {\n  return [\n    useAtomValue(atom, options),\n    // We do wrong type assertion here, which results in throwing an error.\n    useSetAtom(atom, options)\n  ];\n}\n\nexport { Provider, useAtom, useAtomValue, useSetAtom, useStore };\n"],
  "mappings": "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",
  "names": ["atom", "isPromiseLike", "ReactExports", "atom"]
}
